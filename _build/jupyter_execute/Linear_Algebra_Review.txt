a = 1 #scalar
b = 2.5 #scalar
a, b

import numpy as np
x = np.array([1, 2, 3, 4]) #vector, 1-d array
x

len(x), x.shape

A = np.array([[1, 2], [3, 4], [5, 6]]) #3x2 matrix 
A

A.shape

A[2,1]

A_T = A.T # Vector transposition
A_T

A_T.shape

A=np.array([[1,5,0],[5,2,0],[0,0,3]])
(A == A.T).all()

A = np.array([[1, 2], [3, 4], [5, 6]])
A

B = np.array([[2, 5], [7, 4], [4, 3]])
B

A+B # elementwise addition

A-B # elementwise subtraction

A*B # elementwise multiplication, aka Hadamard product

A/B # elementwise division

x = np.arange(10)
x, x.sum()

A = np.array([[1, 2], [3, 4], [5, 6]])

A.sum()

A.sum(axis=0)

A.sum(axis=1)

A = np.array([1, 2,3])
A+4 # broadcasting

A + np.array([4, 4, 4])

x = np.ones(4); y = 2*np.ones(4)
x, y, np.dot(x, y)

np.arccos(x.dot(y) / (np.linalg.norm(x) * np.linalg.norm(y)))

A = np.array([[1, 2], [3, 4], [5, 6]])
x = np.array([1,1])
np.dot(A, x)

A*x

A = np.array([[1, 2], [3, 4], [5, 6]])
B = np.array([[5, 3], [2, 2]])
A.dot(B) 

A = np.array([[2, 3], [1, 4], [7, 6]])
B = np.array([[5], [2]])
C = np.array([[4], [3]])
(A.dot(B+C) == A.dot(B)+A.dot(C)).all()

A = np.array([[2, 3], [1, 4], [7, 6]])
B = np.array([[5, 3], [2, 2]])
C = np.array([[4], [3]])
(A.dot(B.dot(C)) == (A.dot(B)).dot(C)).all()

x = np.array([[2], [6]])
y = np.array([[5], [2]])
(x.T.dot(y) == y.T.dot(x)).all()

A = np.array([[2, 3], [6, 5]])
B = np.array([[5, 3], [2, 2]])
(np.dot(A, B) == np.dot(B, A)).all()

import numpy as np
u = np.array([1,2,3]) # L2 norm
np.linalg.norm(u, ord=2)

u = np.array([1,2,3])
np.linalg.norm(u, ord=1) # L1 norm

u = np.array([1,2,3])
np.linalg.norm(u, ord=np.inf) # L-inf norm, basically choosing the maximum value within the array

A = np.eye(3)
A

x = np.array([[2], [6], [3]])
x

b = A.dot(x)
b

A = np.array([[3, 0, 2], [2, 0, -2], [0, 1, 1]])
A

A_inv = np.linalg.inv(A)
A_inv

A_inv.dot(A)

A = np.array([[2, -1], [1, 1]])
b = np.array([0, 3])
x = np.linalg.inv(A).dot(b)
x

A = np.array([[2, -1], [1, 1], [1, 1]])
b = np.array([0,3,0])
x = np.linalg.pinv(A).dot(b)
x

a=1.;b=2.;
a*np.array([1,2,3])+b*np.array([4,5,6])

A = np.array([[3, 0, 2], [2, 0, -2], [0, 1, 1]])
np.linalg.inv(A)

A = np.array([[1,2],[3,4]]); 
print(A)
B = np.array([[1,2],[2,4]]); 
print(B)
C = np.array([[1,0,0],[0,1,0],[0,0,1]])
print(C)

np.linalg.matrix_rank(A), np.linalg.matrix_rank(B), np.linalg.matrix_rank(C)

A = np.array([[1,2],[2,4]]); 
np.linalg.det(A)


